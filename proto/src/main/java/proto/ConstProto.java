// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: const.proto

package proto;

public final class ConstProto {
  private ConstProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   *错误码
   * </pre>
   *
   * Protobuf enum {@code proto.Result}
   */
  public enum Result
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SUCCESS = 0;</code>
     */
    SUCCESS(0),
    /**
     * <pre>
     *服务空
     * </pre>
     *
     * <code>SERVER_NULL = 1;</code>
     */
    SERVER_NULL(1),
    /**
     * <pre>
     *回复超时
     * </pre>
     *
     * <code>TIME_OUT = 2;</code>
     */
    TIME_OUT(2),
    /**
     * <pre>
     *服务错误
     * </pre>
     *
     * <code>SERVER_ERROR = 3;</code>
     */
    SERVER_ERROR(3),
    /**
     * <pre>
     *桌子已经开始
     * </pre>
     *
     * <code>TABLE_START = 4;</code>
     */
    TABLE_START(4),
    /**
     * <pre>
     *桌子配置错误
     * </pre>
     *
     * <code>TABLE_CONFIG_ERROR = 5;</code>
     */
    TABLE_CONFIG_ERROR(5),
    /**
     * <pre>
     *桌子空
     * </pre>
     *
     * <code>TABLE_NULL = 6;</code>
     */
    TABLE_NULL(6),
    /**
     * <pre>
     *桌子满
     * </pre>
     *
     * <code>TABLE_FULL = 7;</code>
     */
    TABLE_FULL(7),
    /**
     * <pre>
     *桌子异常
     * </pre>
     *
     * <code>TABLE_ERROR = 8;</code>
     */
    TABLE_ERROR(8),
    /**
     * <pre>
     *玩家异常
     * </pre>
     *
     * <code>ROLE_ERROR = 9;</code>
     */
    ROLE_ERROR(9),
    /**
     * <pre>
     *玩家空
     * </pre>
     *
     * <code>ROLE_NULL = 10;</code>
     */
    ROLE_NULL(10),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SUCCESS = 0;</code>
     */
    public static final int SUCCESS_VALUE = 0;
    /**
     * <pre>
     *服务空
     * </pre>
     *
     * <code>SERVER_NULL = 1;</code>
     */
    public static final int SERVER_NULL_VALUE = 1;
    /**
     * <pre>
     *回复超时
     * </pre>
     *
     * <code>TIME_OUT = 2;</code>
     */
    public static final int TIME_OUT_VALUE = 2;
    /**
     * <pre>
     *服务错误
     * </pre>
     *
     * <code>SERVER_ERROR = 3;</code>
     */
    public static final int SERVER_ERROR_VALUE = 3;
    /**
     * <pre>
     *桌子已经开始
     * </pre>
     *
     * <code>TABLE_START = 4;</code>
     */
    public static final int TABLE_START_VALUE = 4;
    /**
     * <pre>
     *桌子配置错误
     * </pre>
     *
     * <code>TABLE_CONFIG_ERROR = 5;</code>
     */
    public static final int TABLE_CONFIG_ERROR_VALUE = 5;
    /**
     * <pre>
     *桌子空
     * </pre>
     *
     * <code>TABLE_NULL = 6;</code>
     */
    public static final int TABLE_NULL_VALUE = 6;
    /**
     * <pre>
     *桌子满
     * </pre>
     *
     * <code>TABLE_FULL = 7;</code>
     */
    public static final int TABLE_FULL_VALUE = 7;
    /**
     * <pre>
     *桌子异常
     * </pre>
     *
     * <code>TABLE_ERROR = 8;</code>
     */
    public static final int TABLE_ERROR_VALUE = 8;
    /**
     * <pre>
     *玩家异常
     * </pre>
     *
     * <code>ROLE_ERROR = 9;</code>
     */
    public static final int ROLE_ERROR_VALUE = 9;
    /**
     * <pre>
     *玩家空
     * </pre>
     *
     * <code>ROLE_NULL = 10;</code>
     */
    public static final int ROLE_NULL_VALUE = 10;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Result valueOf(int value) {
      return forNumber(value);
    }

    public static Result forNumber(int value) {
      switch (value) {
        case 0: return SUCCESS;
        case 1: return SERVER_NULL;
        case 2: return TIME_OUT;
        case 3: return SERVER_ERROR;
        case 4: return TABLE_START;
        case 5: return TABLE_CONFIG_ERROR;
        case 6: return TABLE_NULL;
        case 7: return TABLE_FULL;
        case 8: return TABLE_ERROR;
        case 9: return ROLE_ERROR;
        case 10: return ROLE_NULL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Result>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Result> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Result>() {
            public Result findValueByNumber(int number) {
              return Result.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return proto.ConstProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final Result[] VALUES = values();

    public static Result valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Result(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.Result)
  }

  /**
   * <pre>
   *room状态
   * </pre>
   *
   * Protobuf enum {@code proto.TableState}
   */
  public enum TableState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *等待
     * </pre>
     *
     * <code>WAITE = 0;</code>
     */
    WAITE(0),
    /**
     * <pre>
     *开始
     * </pre>
     *
     * <code>START = 1;</code>
     */
    START(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *等待
     * </pre>
     *
     * <code>WAITE = 0;</code>
     */
    public static final int WAITE_VALUE = 0;
    /**
     * <pre>
     *开始
     * </pre>
     *
     * <code>START = 1;</code>
     */
    public static final int START_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TableState valueOf(int value) {
      return forNumber(value);
    }

    public static TableState forNumber(int value) {
      switch (value) {
        case 0: return WAITE;
        case 1: return START;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TableState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TableState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TableState>() {
            public TableState findValueByNumber(int number) {
              return TableState.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return proto.ConstProto.getDescriptor().getEnumTypes().get(1);
    }

    private static final TableState[] VALUES = values();

    public static TableState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TableState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.TableState)
  }

  /**
   * <pre>
   *操作选择
   * </pre>
   *
   * Protobuf enum {@code proto.Operation}
   */
  public enum Operation
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *过
     * </pre>
     *
     * <code>PASS = 0;</code>
     */
    PASS(0),
    /**
     * <pre>
     *叫地主
     * </pre>
     *
     * <code>CALL = 1;</code>
     */
    CALL(1),
    /**
     * <pre>
     *抢地主
     * </pre>
     *
     * <code>ROB = 2;</code>
     */
    ROB(2),
    /**
     * <pre>
     *不叫地主
     * </pre>
     *
     * <code>NOT_CALL = 3;</code>
     */
    NOT_CALL(3),
    /**
     * <pre>
     *不抢地主
     * </pre>
     *
     * <code>NOT_ROB = 4;</code>
     */
    NOT_ROB(4),
    /**
     * <pre>
     *提示
     * </pre>
     *
     * <code>TIP = 5;</code>
     */
    TIP(5),
    /**
     * <pre>
     *出
     * </pre>
     *
     * <code>PLAY = 6;</code>
     */
    PLAY(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *过
     * </pre>
     *
     * <code>PASS = 0;</code>
     */
    public static final int PASS_VALUE = 0;
    /**
     * <pre>
     *叫地主
     * </pre>
     *
     * <code>CALL = 1;</code>
     */
    public static final int CALL_VALUE = 1;
    /**
     * <pre>
     *抢地主
     * </pre>
     *
     * <code>ROB = 2;</code>
     */
    public static final int ROB_VALUE = 2;
    /**
     * <pre>
     *不叫地主
     * </pre>
     *
     * <code>NOT_CALL = 3;</code>
     */
    public static final int NOT_CALL_VALUE = 3;
    /**
     * <pre>
     *不抢地主
     * </pre>
     *
     * <code>NOT_ROB = 4;</code>
     */
    public static final int NOT_ROB_VALUE = 4;
    /**
     * <pre>
     *提示
     * </pre>
     *
     * <code>TIP = 5;</code>
     */
    public static final int TIP_VALUE = 5;
    /**
     * <pre>
     *出
     * </pre>
     *
     * <code>PLAY = 6;</code>
     */
    public static final int PLAY_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Operation valueOf(int value) {
      return forNumber(value);
    }

    public static Operation forNumber(int value) {
      switch (value) {
        case 0: return PASS;
        case 1: return CALL;
        case 2: return ROB;
        case 3: return NOT_CALL;
        case 4: return NOT_ROB;
        case 5: return TIP;
        case 6: return PLAY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Operation>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Operation> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Operation>() {
            public Operation findValueByNumber(int number) {
              return Operation.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return proto.ConstProto.getDescriptor().getEnumTypes().get(2);
    }

    private static final Operation[] VALUES = values();

    public static Operation valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Operation(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.Operation)
  }

  /**
   * <pre>
   *牌型
   * </pre>
   *
   * Protobuf enum {@code proto.CardType}
   */
  public enum CardType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *单
     * </pre>
     *
     * <code>SINGLE = 0;</code>
     */
    SINGLE(0),
    /**
     * <pre>
     *对子
     * </pre>
     *
     * <code>DOUBLE = 1;</code>
     */
    DOUBLE(1),
    /**
     * <pre>
     *三不带
     * </pre>
     *
     * <code>TRIPLE = 2;</code>
     */
    TRIPLE(2),
    /**
     * <pre>
     *三带一
     * </pre>
     *
     * <code>TRIPLE_ONE = 3;</code>
     */
    TRIPLE_ONE(3),
    /**
     * <pre>
     *三带二
     * </pre>
     *
     * <code>TRIPLE_DOUBLE = 4;</code>
     */
    TRIPLE_DOUBLE(4),
    /**
     * <pre>
     *飞机带一
     * </pre>
     *
     * <code>PLANE_ONE = 5;</code>
     */
    PLANE_ONE(5),
    /**
     * <pre>
     *飞机带二
     * </pre>
     *
     * <code>PLANE_DOUBLE = 6;</code>
     */
    PLANE_DOUBLE(6),
    /**
     * <pre>
     *炸弹带二单
     * </pre>
     *
     * <code>BOOM_DOUBLE_SINGLE = 7;</code>
     */
    BOOM_DOUBLE_SINGLE(7),
    /**
     * <pre>
     *炸弹带二对
     * </pre>
     *
     * <code>BOOM_DOUBLE_CUP = 8;</code>
     */
    BOOM_DOUBLE_CUP(8),
    /**
     * <pre>
     *顺子
     * </pre>
     *
     * <code>STRAIGHT = 9;</code>
     */
    STRAIGHT(9),
    /**
     * <pre>
     *连对子
     * </pre>
     *
     * <code>STRAIGHT_DOUBLE = 10;</code>
     */
    STRAIGHT_DOUBLE(10),
    /**
     * <pre>
     *炸弹
     * </pre>
     *
     * <code>BOOM = 11;</code>
     */
    BOOM(11),
    /**
     * <pre>
     *双王炸
     * </pre>
     *
     * <code>BOOM_MAX = 12;</code>
     */
    BOOM_MAX(12),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *单
     * </pre>
     *
     * <code>SINGLE = 0;</code>
     */
    public static final int SINGLE_VALUE = 0;
    /**
     * <pre>
     *对子
     * </pre>
     *
     * <code>DOUBLE = 1;</code>
     */
    public static final int DOUBLE_VALUE = 1;
    /**
     * <pre>
     *三不带
     * </pre>
     *
     * <code>TRIPLE = 2;</code>
     */
    public static final int TRIPLE_VALUE = 2;
    /**
     * <pre>
     *三带一
     * </pre>
     *
     * <code>TRIPLE_ONE = 3;</code>
     */
    public static final int TRIPLE_ONE_VALUE = 3;
    /**
     * <pre>
     *三带二
     * </pre>
     *
     * <code>TRIPLE_DOUBLE = 4;</code>
     */
    public static final int TRIPLE_DOUBLE_VALUE = 4;
    /**
     * <pre>
     *飞机带一
     * </pre>
     *
     * <code>PLANE_ONE = 5;</code>
     */
    public static final int PLANE_ONE_VALUE = 5;
    /**
     * <pre>
     *飞机带二
     * </pre>
     *
     * <code>PLANE_DOUBLE = 6;</code>
     */
    public static final int PLANE_DOUBLE_VALUE = 6;
    /**
     * <pre>
     *炸弹带二单
     * </pre>
     *
     * <code>BOOM_DOUBLE_SINGLE = 7;</code>
     */
    public static final int BOOM_DOUBLE_SINGLE_VALUE = 7;
    /**
     * <pre>
     *炸弹带二对
     * </pre>
     *
     * <code>BOOM_DOUBLE_CUP = 8;</code>
     */
    public static final int BOOM_DOUBLE_CUP_VALUE = 8;
    /**
     * <pre>
     *顺子
     * </pre>
     *
     * <code>STRAIGHT = 9;</code>
     */
    public static final int STRAIGHT_VALUE = 9;
    /**
     * <pre>
     *连对子
     * </pre>
     *
     * <code>STRAIGHT_DOUBLE = 10;</code>
     */
    public static final int STRAIGHT_DOUBLE_VALUE = 10;
    /**
     * <pre>
     *炸弹
     * </pre>
     *
     * <code>BOOM = 11;</code>
     */
    public static final int BOOM_VALUE = 11;
    /**
     * <pre>
     *双王炸
     * </pre>
     *
     * <code>BOOM_MAX = 12;</code>
     */
    public static final int BOOM_MAX_VALUE = 12;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CardType valueOf(int value) {
      return forNumber(value);
    }

    public static CardType forNumber(int value) {
      switch (value) {
        case 0: return SINGLE;
        case 1: return DOUBLE;
        case 2: return TRIPLE;
        case 3: return TRIPLE_ONE;
        case 4: return TRIPLE_DOUBLE;
        case 5: return PLANE_ONE;
        case 6: return PLANE_DOUBLE;
        case 7: return BOOM_DOUBLE_SINGLE;
        case 8: return BOOM_DOUBLE_CUP;
        case 9: return STRAIGHT;
        case 10: return STRAIGHT_DOUBLE;
        case 11: return BOOM;
        case 12: return BOOM_MAX;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CardType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CardType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CardType>() {
            public CardType findValueByNumber(int number) {
              return CardType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return proto.ConstProto.getDescriptor().getEnumTypes().get(3);
    }

    private static final CardType[] VALUES = values();

    public static CardType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CardType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.CardType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013const.proto\022\005proto*\277\001\n\006Result\022\013\n\007SUCCE" +
      "SS\020\000\022\017\n\013SERVER_NULL\020\001\022\014\n\010TIME_OUT\020\002\022\020\n\014S" +
      "ERVER_ERROR\020\003\022\017\n\013TABLE_START\020\004\022\026\n\022TABLE_" +
      "CONFIG_ERROR\020\005\022\016\n\nTABLE_NULL\020\006\022\016\n\nTABLE_" +
      "FULL\020\007\022\017\n\013TABLE_ERROR\020\010\022\016\n\nROLE_ERROR\020\t\022" +
      "\r\n\tROLE_NULL\020\n*\"\n\nTableState\022\t\n\005WAITE\020\000\022" +
      "\t\n\005START\020\001*V\n\tOperation\022\010\n\004PASS\020\000\022\010\n\004CAL" +
      "L\020\001\022\007\n\003ROB\020\002\022\014\n\010NOT_CALL\020\003\022\013\n\007NOT_ROB\020\004\022" +
      "\007\n\003TIP\020\005\022\010\n\004PLAY\020\006*\332\001\n\010CardType\022\n\n\006SINGL" +
      "E\020\000\022\n\n\006DOUBLE\020\001\022\n\n\006TRIPLE\020\002\022\016\n\nTRIPLE_ON",
      "E\020\003\022\021\n\rTRIPLE_DOUBLE\020\004\022\r\n\tPLANE_ONE\020\005\022\020\n" +
      "\014PLANE_DOUBLE\020\006\022\026\n\022BOOM_DOUBLE_SINGLE\020\007\022" +
      "\023\n\017BOOM_DOUBLE_CUP\020\010\022\014\n\010STRAIGHT\020\t\022\023\n\017ST" +
      "RAIGHT_DOUBLE\020\n\022\010\n\004BOOM\020\013\022\014\n\010BOOM_MAX\020\014B" +
      "\014B\nConstProtob\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
